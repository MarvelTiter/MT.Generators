using AutoWasmApiGenerator.Test;

// ReSharper disable InconsistentNaming

namespace AutoWasmApiGenerator;

public partial class ControllerGeneratorTest : IncrementalSourceGeneratorTestBase
{
    private const string AssemblyTag = "[assembly: AutoWasmApiGenerator.WebControllerAssembly]";

    private const string Usings = @"global using AutoWasmApiGenerator;
global using System;
global using System.Threading;
global using System.Threading.Tasks;
global using System.Text.Json;
global using System.Net.Http;
global using System.Collections.Generic;
global using System.Text;
global using System.Linq;
// using Microsoft.Extensions.DependencyInjection;
";

    #region WAG00004

    private const string TestWag00004 = @"namespace AutoWasmApiGenerator.Test;

[WebController]
public interface ITest<T>
{
    void Log<T>(T message);
}
";

    #endregion

    #region SuccessCode

    private const string TestSuccessCode = @"namespace AutoWasmApiGenerator.Test;

[WebController]
public interface ITest
{
    void Log(string message);
}
";

    private static string TestSuccessResult;

    private static void UpdateTestSuccessResult()
    {
        TestSuccessResult =
            $$"""
              // <auto-generated/>
              #pragma warning disable
              #nullable enable



              namespace AutoWasmApiGenerator.Test
              {
                  [global::Microsoft.AspNetCore.Mvc.ApiController]
                  [global::Microsoft.AspNetCore.Mvc.Route("api/[controller]")]
                  [global::System.CodeDom.Compiler.GeneratedCode("AutoWasmApiGenerator.ControllerGenerator", "{{GeneratorVersion}}")]
                  /// <inheritdoc/>
                  public class TestController : global::Microsoft.AspNetCore.Mvc.ControllerBase
                  {
                      private readonly AutoWasmApiGenerator.Test.ITest proxyService;
              
                      public TestController(AutoWasmApiGenerator.Test.ITest service)
                      {
                          proxyService = service;
                      }
              
                      [global::Microsoft.AspNetCore.Mvc.HttpPost("Log")]
                      [global::System.CodeDom.Compiler.GeneratedCode("AutoWasmApiGenerator.ControllerGenerator", "0.1.1.0")]
                      public void Log([global::Microsoft.AspNetCore.Mvc.FromBody]string message)
                        => proxyService.Log(message);
                  }
              }
              """;
    }

    #endregion

    #region Partial

    private const string TestPartialSource = @"namespace AutoWasmApiGenerator.Test;

[WebController(Partial = true)]
public interface ITest
{
    void Log(string message);
}
";

    private static string TestPartialSourceResult;

    private static void UpdatePartialResult()
    {
        TestPartialSourceResult
            = $$"""
                // <auto-generated/>
                #pragma warning disable
                #nullable enable



                namespace AutoWasmApiGenerator.Test
                {
                    [global::Microsoft.AspNetCore.Mvc.ApiController]
                    [global::Microsoft.AspNetCore.Mvc.Route("api/[controller]")]
                    [global::System.CodeDom.Compiler.GeneratedCode("AutoWasmApiGenerator.ControllerGenerator", "{{GeneratorVersion}}")]
                    /// <inheritdoc/>
                    public partial class TestController : global::Microsoft.AspNetCore.Mvc.ControllerBase
                    {
                        private readonly AutoWasmApiGenerator.Test.ITest proxyService;
                
                        public TestController(AutoWasmApiGenerator.Test.ITest service)
                        {
                            proxyService = service;
                        }
                
                        [global::Microsoft.AspNetCore.Mvc.HttpPost("Log")]
                        [global::System.CodeDom.Compiler.GeneratedCode("AutoWasmApiGenerator.ControllerGenerator", "{{GeneratorVersion}}")]
                        public void Log([global::Microsoft.AspNetCore.Mvc.FromBody]string message)
                          => proxyService.Log(message);
                    }
                }
                """;
    }

    #endregion
}