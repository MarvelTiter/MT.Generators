using Generators.Shared;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using static AutoPageStateContainerGenerator.GeneratorHelper;

namespace AutoPageStateContainerGenerator;

[Generator(LanguageNames.CSharp)]
public class PageStateContainerGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var map = context.SyntaxProvider.ForAttributeWithMetadataName(
             STATE_CONTAINER,
             static (node, _) => node is ClassDeclarationSyntax,
             static (ctx, _) => BuildContext(ctx.TargetSymbol)).Collect();

        context.RegisterSourceOutput(map, static (context, source) =>
        {
            foreach (var item in source)
            {
                if (item.Diagnostic is not null)
                {
                    context.ReportDiagnostic(item.Diagnostic);
                    continue;
                }
                var containerFile = CreateContainerClass(item);
                context.AddSource(containerFile);
                var componentFile = CreatePartialRazorClass(item);
                context.AddSource(componentFile);

#if DEBUG
                var c1 = containerFile.ToString();
                var c2 = componentFile.ToString();
#endif
            }
        });
                // 无法引用生成的类型
//        context.RegisterImplementationSourceOutput(context.CompilationProvider, static (context, source) =>
//        {
//            if (source.Options.OutputKind == OutputKind.NetModule || source.Options.OutputKind == OutputKind.DynamicallyLinkedLibrary)
//            {
//                // We only want to generate code for executable projects
//                return;
//            }
//            var members = source.FindByAttributeMetadataName(STATE_CONTAINER
//                , ctx => BuildContext(ctx.TargetSymbol));
//            var file = CreateServiceCollectionExtension(source.AssemblyName ?? "AutoGeneratedServiceCollectionExtension", members);
//            context.AddSource(file);
//#if DEBUG
//            var c1 = file.ToString();
//#endif
//        });

    }

    private static bool IsBlazorExecutableProject(Compilation compilation)
    {
        // 更智能的判断逻辑
        var outputKind = compilation.Options.OutputKind;

        // 必须是可执行项目
        if (outputKind != OutputKind.ConsoleApplication &&
            outputKind != OutputKind.WindowsApplication)
        {
            return false;
        }

        // 进一步检查是否是 Blazor 项目
        var assemblyName = compilation.AssemblyName;
        var isBlazorProject = assemblyName != null &&
            (assemblyName.EndsWith(".Server") ||
             assemblyName.EndsWith(".Client") ||
             compilation.GetTypeByMetadataName("Microsoft.AspNetCore.Components.ComponentBase") != null);

        return isBlazorProject;
    }

    //private static void CreateCodeFile(SourceProductionContext context, ImmutableArray<GeneratorAttributeSyntaxContext> sources)
    //{
    //    foreach (var source in sources)
    //    {
    //        var classSymbol = (INamedTypeSymbol)source.TargetSymbol;
    //        var fields = classSymbol.GetMembers().Where(m => m.Kind == SymbolKind.Field && m.HasAttribute(STATE_FLAG)).Cast<IFieldSymbol>().ToArray();

    //        var props = classSymbol.GetAllMembers(_ => true).Where(m => m.Kind == SymbolKind.Property && m.HasAttribute(STATE_FLAG)).Cast<IPropertySymbol>().ToArray();
    //        // 创建容器类

    //        // TODO 检查字段命名

    //        var containerClass = CreateContainerClass(classSymbol, fields, props);
    //        context.AddSource(containerClass);
    //        // 创建Razor组件分部类
    //        var partialRazor = CreatePartialRazorClass(classSymbol, fields, props);
    //        context.AddSource(partialRazor);
    //    }
    //}

    //private static CodeFile CreateContainerClass(INamedTypeSymbol classSymbol, IFieldSymbol[] fields, IPropertySymbol[] props)
    //{
    //    classSymbol.GetAttribute(STATE_CONTAINER, out var attributeData);
    //    var lifetime = attributeData.GetNamedValue("Lifetime");
    //    var containerName = attributeData.GetNamedValue("Name");
    //    var implements = attributeData.GetNamedValue("Implements") as INamedTypeSymbol;
    //    List<(string, string?)> attrParameters = [];
    //    if (lifetime is int v)
    //    {
    //        attrParameters.Add(("Lifetime", $"{v}"));
    //    }
    //    if (containerName is not null)
    //    {
    //        attrParameters.Add(("Name", $"\"{containerName}\""));
    //    }
    //    if (implements is not null)
    //    {
    //        attrParameters.Add(("Implements", $"typeof({implements.ToDisplayString()})"));
    //    }
    //    var cb = ClassBuilder.Default
    //        .ClassName($"{classSymbol.FormatClassName(true)}StateContainer")
    //        .Generic([.. classSymbol.GetTypeParameters()])
    //     .Attribute("AutoPageStateContainerGenerator.GeneratedStateContainerAttribute", [.. attrParameters])
    //        .Interface("AutoPageStateContainerGenerator.IGeneratedStateContainer")
    //        .InterfaceIf(implements is not null, implements?.ToDisplayString()!)
    //        .AddGeneratedCodeAttribute(typeof(PageStateContainerGenerator));
    //    var changeEvent = FieldBuilder.Default.Modifiers("public").MemberType("event Action?").FieldName("OnChange");
    //    var notifyChangeMethod = MethodBuilder.Default.Modifiers("private").MethodName("NotifyStateChanged").Lambda("OnChange?.Invoke()");
    //    cb.AddMembers(changeEvent, notifyChangeMethod);
    //    foreach (var field in fields)
    //    {
    //        var syntax = field.DeclaringSyntaxReferences.FirstOrDefault()?.GetSyntax() as VariableDeclaratorSyntax;

    //        var init = syntax?.Initializer?.Value;

    //        field.GetAttribute(STATE_FLAG, out var ad);
    //        var initString = ad.GetNamedValue("Init");

    //        var name = field.Name;
    //        if (name.StartsWith("_"))
    //        {
    //            name = name.Substring(1);
    //        }
    //        var propName = $"{name[0].ToString().ToUpper()}{name.Substring(1)}";
    //        var prop = PropertyBuilder.Default
    //            .PropertyName(propName)
    //            .MemberType(field.Type.ToDisplayString())
    //            .Full().Get(p =>
    //         {
    //             return [$"return {p.FieldName}"];
    //         }).Set(p =>
    //         {
    //             return [$"{p.FieldName} = value", "NotifyStateChanged()"];
    //         });
    //        if (init is not null)
    //        {
    //            prop.InitializeWith(init.ToFullString());
    //        }

    //        if (initString is string s && s.Length > 0)
    //        {
    //            prop.InitializeWith(s);
    //        }
    //        cb.AddMembers(prop);
    //    }

    //    foreach (var prop in props)
    //    {
    //        var syntax = prop.DeclaringSyntaxReferences.FirstOrDefault()?.GetSyntax() as PropertyDeclarationSyntax;
    //        var init = syntax?.Initializer?.Value;
    //        prop.GetAttribute(STATE_FLAG, out var ad);
    //        var initString = ad.GetNamedValue("Init");
    //        var pb = PropertyBuilder.Default
    //            .PropertyName(prop.Name)
    //            .MemberType(prop.Type.ToDisplayString())
    //            .Full().Get(p =>
    //            {
    //                return [$"return {p.FieldName}"];
    //            }).Set(p =>
    //            {
    //                return [$"{p.FieldName} = value", "NotifyStateChanged()"];
    //            });
    //        if (init is not null)
    //        {
    //            pb.InitializeWith(init.ToFullString());
    //        }
    //        if (initString is string s && s.Length > 0)
    //        {
    //            pb.InitializeWith(s);
    //        }
    //        cb.AddMembers(pb);
    //    }

    //    return CodeFile.New($"{classSymbol.FormatFileName()}.StateContainer.g.cs")
    //        .AddUsings(classSymbol.GetTargetUsings())
    //        .AddMembers(NamespaceBuilder.Default.FileScoped().Namespace(classSymbol.ContainingNamespace.ToDisplayString()).AddMembers(cb));
    //}

    //private static CodeFile CreatePartialRazorClass(INamedTypeSymbol classSymbol, IFieldSymbol[] fields, IPropertySymbol[] props)
    //{
    //    classSymbol.GetAttribute(STATE_CONTAINER, out var attributeData);
    //    var customName = attributeData.GetNamedValue("Name");
    //    TypeParameterInfo[] typedArgs = [.. classSymbol.GetTypeParameters()];
    //    var cb = ClassBuilder.Default.ClassName($"{classSymbol.FormatClassName()}")
    //        .Generic(typedArgs)
    //        .Modifiers("partial");
    //    var containerName = customName?.ToString() ?? "StateContainer";
    //    var sc = PropertyBuilder.Default
    //         .PropertyName(containerName)
    //         .MemberType($"{classSymbol.FormatClassName(true)}StateContainer", typedArgs)
    //         .Attribute("global::Microsoft.AspNetCore.Components.InjectAttribute");
    //    cb.AddMembers(sc);
    //    foreach (var field in fields)
    //    {
    //        var name = field.Name;
    //        if (name.StartsWith("_"))
    //        {
    //            name = name.Substring(1);
    //        }
    //        var propName = $"{name[0].ToString().ToUpper()}{name.Substring(1)}";
    //        var proxyProp = PropertyBuilder.Default
    //            .PropertyName(propName)
    //            .MemberType(field.Type.ToDisplayString())
    //            .GetLambda($"{containerName}.{propName}")
    //            .SetLambda($"{containerName}.{propName} = value");
    //        cb.AddMembers(proxyProp);
    //    }

    //    foreach (var prop in props)
    //    {
    //        if (!EqualityComparer<INamedTypeSymbol>.Default.Equals(prop.ContainingType, classSymbol) && !prop.IsVirtual)
    //        {
    //            continue;
    //        }
    //        var proxyProp = PropertyBuilder.Default
    //            .PropertyName(prop.Name)
    //            .Modifiers("public partial")
    //            .MemberType(prop.Type.ToDisplayString())
    //            .GetLambda($"{containerName}.{prop.Name}")
    //            .SetLambda($"{containerName}.{prop.Name} = value");
    //        if (prop.IsVirtual)
    //        {
    //            proxyProp.Modifiers("public override");
    //        }
    //        cb.AddMembers(proxyProp);
    //    }

    //    return CodeFile.New($"{classSymbol.FormatFileName()}.PageState.g.cs")
    //        .AddUsings(classSymbol.GetTargetUsings())
    //        .AddMembers(NamespaceBuilder.Default.FileScoped().Namespace(classSymbol.ContainingNamespace.ToDisplayString()).AddMembers(cb));
    //}
}
