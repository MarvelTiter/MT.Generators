// ReSharper disable InconsistentNaming
namespace AutoWasmApiGenerator.Test;

public partial class HttpServiceInvokerGeneratorTest
{
    private const string AssemblyTag = @"       [assembly: AutoWasmApiGenerator.ApiInvokerAssembly]
        [assembly: AutoWasmApiGenerator.WebControllerAssembly]
";

    private const string Usings = @"global using AutoWasmApiGenerator;
global using System;
global using System.Threading;
global using System.Threading.Tasks;
global using System.Text.Json;
global using System.Net.Http;
global using System.Collections.Generic;
global using System.Text;
global using System.Linq;
// using Microsoft.Extensions.DependencyInjection;
";

    #region Wag00005

    private const string TestWag00005 = @"namespace AutoWasmApiGenerator.Test;

[WebController(Authorize = true)]
[ApiInvokerGenerate]
public interface ITest
{
    void Log(string message);
}";

    #endregion

    #region Wag00006

    private const string TestWag00006 = @"using AutoWasmApiGenerator
namespace AutoWasmApiGenerator.Test;

[WebController]
[ApiInvokerGenerate]
public interface ITest
{
    [WebMethod(Method = WebMethod.Post)]
    Task<bool> LogAsync([WebMethodParameterBinding(BindingType.FromRoute)] string model0)] TestModel1 model1);
}
";

    #endregion

    #region Wag00007

    private const string TestWag00007 = @"using AutoWasmApiGenerator
namespace AutoWasmApiGenerator.Test;

public record TestModel0(string Name, int Age);

public record TestModel1(string Name, double Salary);

[WebController]
[ApiInvokerGenerate]
public interface ITest
{
    [WebMethod(Method = WebMethod.Post)]
    Task<bool> LogAsync([WebMethodParameterBinding(BindingType.FromBody)] TestModel0 model0, [WebMethodParameterBinding(BindingType.FromForm)] TestModel1 model1);
}

";

    #endregion

    #region Wag00010

    private const string TestWag00010 = @"using AutoWasmApiGenerator";
    // private const string TestWag00010Result = @"using AutoWasmApiGenerator";

    #endregion

    #region Wag00011

    private const string TestWag00011 = @"namespace AutoWasmApiGenerator.Test;

[ApiInvokerGenerate]
public interface ITest
{
    [WebMethod(Method = WebMethod.Get)]
    Task<bool> LogAsync(string message);
}";

    #endregion

    #region Wag00002

    private const string TestWag00002 = @"using AutoWasmApiGenerator";

    #endregion

    #region Wag00003

    private const string TestWag00003 = @"using AutoWasmApiGenerator";

    #endregion

    #region Success

    private static void UpdateSuccessTestString()
    {
        TestSuccessResult =
            $$"""
              // <auto-generated/>
              #pragma warning disable
              #nullable enable

              using Microsoft.Extensions.DependencyInjection;

              namespace AutoWasmApiGenerator.Test
              {
                  [global::System.CodeDom.Compiler.GeneratedCode("AutoWasmApiGenerator.HttpServiceInvokerGenerator", "{{GeneratorVersion}}")]
                  /// <inheritdoc/>
                  public partial class TestApiInvoker : global::AutoWasmApiGenerator.Test.ITest
                  {
                      private readonly global::System.Text.Json.JsonSerializerOptions _JSON_OPTIONS_gen;
              
                      private readonly global::System.Net.Http.IHttpClientFactory clientFactory;
              
                      private readonly global::AutoWasmApiGenerator.IHttpClientHeaderHandler headerHandler;
              
                      public TestApiInvoker(global::System.Net.Http.IHttpClientFactory factory, global::System.IServiceProvider services)
                      {
                          clientFactory = factory;
                          headerHandler = services.GetService<global::AutoWasmApiGenerator.IHttpClientHeaderHandler>() ?? global::AutoWasmApiGenerator.DefaultHttpClientHeaderHandler.Default;
                          _JSON_OPTIONS_gen = new global::System.Text.Json.JsonSerializerOptions() { PropertyNameCaseInsensitive = true };
                      }
              
                      [global::System.CodeDom.Compiler.GeneratedCode("AutoWasmApiGenerator.HttpServiceInvokerGenerator", "{{GeneratorVersion}}")]
                      public void Log(string message)
                        => throw new global::System.NotSupportedException();
              
                      [global::System.CodeDom.Compiler.GeneratedCode("AutoWasmApiGenerator.HttpServiceInvokerGenerator", "{{GeneratorVersion}}")]
                      public async global::System.Threading.Tasks.Task<bool> LogAsync(string message)
                      {
                          var _client_gen = this.clientFactory.CreateClient("Test");
                          var _request_gen = new global::System.Net.Http.HttpRequestMessage();
                          _request_gen.Method = global::System.Net.Http.HttpMethod.Get;
                          await headerHandler.SetRequestHeaderAsync(_request_gen, global::System.Threading.CancellationToken.None);
                          var _url_gen = $"api/Test/Log";
                          var _queries_gen = new global::System.Collections.Generic.List<string>();
                          _queries_gen.Add($"{nameof(message)}={message}");
                          _url_gen = $"{_url_gen}?{string.Join("&", _queries_gen)}";
                          _request_gen.RequestUri = new global::System.Uri(_url_gen, UriKind.Relative);
                          var _response_gen = await _client_gen.SendAsync(_request_gen);
                          _response_gen.EnsureSuccessStatusCode();
                          var _str_gen = await _response_gen.Content.ReadAsStringAsync();
                          bool.TryParse(_str_gen, out var val);
                          return val;
                      }
              
                      [global::System.CodeDom.Compiler.GeneratedCode("AutoWasmApiGenerator.HttpServiceInvokerGenerator", "{{GeneratorVersion}}")]
                      public async global::System.Threading.Tasks.Task<bool> Log2Async(string message, global::System.Threading.CancellationToken token)
                      {
                          var _client_gen = this.clientFactory.CreateClient("Test");
                          var _request_gen = new global::System.Net.Http.HttpRequestMessage();
                          _request_gen.Method = global::System.Net.Http.HttpMethod.Post;
                          await headerHandler.SetRequestHeaderAsync(_request_gen, token);
                          var _url_gen = $"api/Test/Log2";
                          var _json_gen = global::System.Text.Json.JsonSerializer.Serialize(message);
                          _request_gen.Content = new global::System.Net.Http.StringContent(_json_gen, global::System.Text.Encoding.Default, "application/json");
                          _request_gen.RequestUri = new global::System.Uri(_url_gen, UriKind.Relative);
                          var _response_gen = await _client_gen.SendAsync(_request_gen, token);
                          _response_gen.EnsureSuccessStatusCode();
                          var _str_gen = await _response_gen.Content.ReadAsStringAsync(token);
                          bool.TryParse(_str_gen, out var val);
                          return val;
                      }
              
                      [global::System.CodeDom.Compiler.GeneratedCode("AutoWasmApiGenerator.HttpServiceInvokerGenerator", "{{GeneratorVersion}}")]
                      public async global::System.Threading.Tasks.Task<bool> Log3Async(string message, string path, global::System.Threading.CancellationToken token)
                      {
                          var _client_gen = this.clientFactory.CreateClient("Test");
                          var _request_gen = new global::System.Net.Http.HttpRequestMessage();
                          _request_gen.Method = global::System.Net.Http.HttpMethod.Delete;
                          await headerHandler.SetRequestHeaderAsync(_request_gen, token);
                          var _url_gen = $"api/Test/Log3";
                          var _queries_gen = new global::System.Collections.Generic.List<string>();
                          _queries_gen.Add($"{nameof(path)}={path}");
                          _url_gen = $"{_url_gen}?{string.Join("&", _queries_gen)}";
                          var _json_gen = global::System.Text.Json.JsonSerializer.Serialize(message);
                          _request_gen.Content = new global::System.Net.Http.StringContent(_json_gen, global::System.Text.Encoding.Default, "application/json");
                          _request_gen.RequestUri = new global::System.Uri(_url_gen, UriKind.Relative);
                          var _response_gen = await _client_gen.SendAsync(_request_gen, token);
                          _response_gen.EnsureSuccessStatusCode();
                          var _str_gen = await _response_gen.Content.ReadAsStringAsync(token);
                          bool.TryParse(_str_gen, out var val);
                          return val;
                      }
                  }
              }
              """;
    }

    private const string TestSuccessCode = @"using AutoWasmApiGenerator;
using System.Threading.Tasks;
namespace AutoWasmApiGenerator.Test;

[WebController(Authorize = true)]
[ApiInvokerGenerate]
public interface ITest
{
    [ApiInvokeNotSupported]
    void Log(string message);
    [WebMethod(Method = WebMethod.Get)]
    Task<bool> LogAsync(string message);

    [WebMethod(Method = WebMethod.Post)]
    Task<bool> Log2Async([WebMethodParameterBinding(BindingType.FromBody)] string message, [WebMethodParameterBinding(BindingType.Ignore)] CancellationToken token);

    [WebMethod(Method = WebMethod.Delete)]
    Task<bool> Log3Async([WebMethodParameterBinding(BindingType.FromBody)] string message, [WebMethodParameterBinding(BindingType.FromQuery)] string path, CancellationToken token);
}
";

    private static string TestSuccessResult = null!; // Updated in UpdateTestString

    #endregion

    #region FromRoute

    private const string TestFromRoute =
        """
        using AutoWasmApiGenerator
        namespace AutoWasmApiGenerator.Test;

        [WebController]
        [ApiInvokerGenerate]
        public interface ITest
        {
            [WebMethod(Method = WebMethod.Post, Route="Log/{model0}")]
            Task<bool> LogAsync([WebMethodParameterBinding(BindingType.FromRoute)] string model0);
        }
        """;

    private static string TestFromRouteResult = null!; // Updated in UpdateFromRouteTestString

    private static void UpdateFromRouteTestString()
    {
        TestFromRouteResult =
            $$"""
            // <auto-generated/>
            #pragma warning disable
            #nullable enable

            using Microsoft.Extensions.DependencyInjection;

            namespace AutoWasmApiGenerator.Test
            {
                [global::System.CodeDom.Compiler.GeneratedCode("AutoWasmApiGenerator.HttpServiceInvokerGenerator", "{{GeneratorVersion}}")]
                /// <inheritdoc/>
                public partial class TestApiInvoker : global::AutoWasmApiGenerator.Test.ITest
                {
                    private readonly global::System.Text.Json.JsonSerializerOptions _JSON_OPTIONS_gen;
            
                    private readonly global::System.Net.Http.IHttpClientFactory clientFactory;
            
                    public TestApiInvoker(global::System.Net.Http.IHttpClientFactory factory)
                    {
                        clientFactory = factory;
                        _JSON_OPTIONS_gen = new global::System.Text.Json.JsonSerializerOptions() { PropertyNameCaseInsensitive = true };
                    }
            
                    [global::System.CodeDom.Compiler.GeneratedCode("AutoWasmApiGenerator.HttpServiceInvokerGenerator", "{{GeneratorVersion}}")]
                    public async global::System.Threading.Tasks.Task<bool> LogAsync(string model0)
                    {
                        var _client_gen = this.clientFactory.CreateClient("Test");
                        var _request_gen = new global::System.Net.Http.HttpRequestMessage();
                        _request_gen.Method = global::System.Net.Http.HttpMethod.Post;
                        var _url_gen = $"api/Test/Log/Log/{model0}";
                        _request_gen.RequestUri = new global::System.Uri(_url_gen, UriKind.Relative);
                        var _response_gen = await _client_gen.SendAsync(_request_gen);
                        _response_gen.EnsureSuccessStatusCode();
                        var _str_gen = await _response_gen.Content.ReadAsStringAsync();
                        bool.TryParse(_str_gen, out var val);
                        return val;
                    }
                }
            }
            """;
    }

    #endregion

    #region Wag00008

    private const string TestWag00008 = @"using AutoWasmApiGenerator
namespace AutoWasmApiGenerator.Test;

public record TestModel0(string Name, int Age);

public record TestModel1(string Name, double Salary);

[WebController]
[ApiInvokerGenerate]
public interface ITest
{
    [WebMethod(Method = WebMethod.Post)]
    Task<bool> LogAsync([WebMethodParameterBinding(BindingType.FromBody)] TestModel0 model0, [WebMethodParameterBinding(BindingType.FromBody)] TestModel1 model1);
}
";

    private const string TestWag00008Result = @"using AutoWasmApiGenerator";

    #endregion

    #region Wag00009

    private const string TestWag00009_0 = @"namespace AutoWasmApiGenerator.Test;

[WebController(Authorize = true)]
[ApiInvokerGenerate]
public interface ITest
{
    Task<CancellationToken> Log(string message);
}";

    private const string TestWag00009_ValidReturnType = @"namespace AutoWasmApiGenerator.Test;

[WebController(Authorize = true)]
[ApiInvokerGenerate]
public interface ITest
{
    Task<bool> Log(string message);
}";

    private static string TestWag00009_ValidReturnTypeResult = null!; // Updated in UpdateWag00009TestString

    private static void UpdateWag00009TestString()
    {
        TestWag00009_ValidReturnTypeResult =
            $$"""
            // <auto-generated/>
            #pragma warning disable
            #nullable enable

            using Microsoft.Extensions.DependencyInjection;

            namespace AutoWasmApiGenerator.Test
            {
                [global::System.CodeDom.Compiler.GeneratedCode("AutoWasmApiGenerator.HttpServiceInvokerGenerator", "{{GeneratorVersion}}")]
                /// <inheritdoc/>
                public partial class TestApiInvoker : global::AutoWasmApiGenerator.Test.ITest
                {
                    private readonly global::System.Text.Json.JsonSerializerOptions _JSON_OPTIONS_gen;
            
                    private readonly global::System.Net.Http.IHttpClientFactory clientFactory;
            
                    private readonly global::AutoWasmApiGenerator.IHttpClientHeaderHandler headerHandler;
            
                    public TestApiInvoker(global::System.Net.Http.IHttpClientFactory factory, global::System.IServiceProvider services)
                    {
                        clientFactory = factory;
                        headerHandler = services.GetService<global::AutoWasmApiGenerator.IHttpClientHeaderHandler>() ?? global::AutoWasmApiGenerator.DefaultHttpClientHeaderHandler.Default;
                        _JSON_OPTIONS_gen = new global::System.Text.Json.JsonSerializerOptions() { PropertyNameCaseInsensitive = true };
                    }
            
                    [global::System.CodeDom.Compiler.GeneratedCode("AutoWasmApiGenerator.HttpServiceInvokerGenerator", "{{GeneratorVersion}}")]
                    public async global::System.Threading.Tasks.Task<bool> Log(string message)
                    {
                        var _client_gen = this.clientFactory.CreateClient("Test");
                        var _request_gen = new global::System.Net.Http.HttpRequestMessage();
                        _request_gen.Method = global::System.Net.Http.HttpMethod.Post;
                        await headerHandler.SetRequestHeaderAsync(_request_gen, global::System.Threading.CancellationToken.None);
                        var _url_gen = $"api/Test/Log";
                        _request_gen.RequestUri = new global::System.Uri(_url_gen, UriKind.Relative);
                        var _response_gen = await _client_gen.SendAsync(_request_gen);
                        _response_gen.EnsureSuccessStatusCode();
                        var _str_gen = await _response_gen.Content.ReadAsStringAsync();
                        bool.TryParse(_str_gen, out var val);
                        return val;
                    }
                }
            }
            """;
    }

    #endregion
}