using Generators.Shared;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;

namespace AutoWasmApiGenerator
{
    public static class GeneratorHepers
    {
        public const string WebControllerAttributeFullName = "AutoWasmApiGenerator.WebControllerAttribute";
        public const string WebControllerAssemblyAttributeFullName = "AutoWasmApiGenerator.WebControllerAssemblyAttribute";
        public const string ApiInvokerAttributeFullName = "AutoWasmApiGenerator.ApiInvokerGenerateAttribute";
        public const string ApiInvokerAssemblyAttributeFullName = "AutoWasmApiGenerator.ApiInvokerAssemblyAttribute";
        public const string WebMethodAttributeFullName = "AutoWasmApiGenerator.WebMethodAttribute";
        public const string DisableWebApiGenerator = "DisableWebApiGenerator";
        public const string DisableApiInvokerGenerator = "DisableApiInvokerGenerator";
        public static Dictionary<int, string> WebMethod { get; } = new()
        {
            [0] = "Get",
            [1] = "Post",
            [2] = "Put",
            [3] = "Delete"
        };
        public static string FormatClassName(string className)
        {
            if (className.IndexOf('`') > -1)
            {
                className = className.Substring(0, className.IndexOf('`'));
            }
            if (className.StartsWith("I"))
            {
                className = className.Substring(1);
            }
            return className;
        }

        public static IEnumerable<IMethodSymbol> GetAllMethods(this INamedTypeSymbol? symbol)
        {
            var all = symbol?.Interfaces.Insert(0, symbol) ?? [];
            foreach (var m in all)
            {
                foreach (var item in m.GetMembers().Where(m => m is IMethodSymbol).Cast<IMethodSymbol>())
                {
                    //if (item.MethodKind == MethodKind.Constructor)
                    //{
                    //    continue;
                    //}

                    yield return m.IsGenericType ? item.ConstructedFrom : item;
                }
            }
        }


        public static CompilationUnitSyntax CreateCompilationUnit(this GeneratorAttributeSyntaxContext source)
        {

            //CompilationUnit()
            //    .AddMembers(NamespaceDeclaration())
            return CompilationUnit();
        }

        //public static NamespaceDeclarationSyntax CreateNamespaceDeclaration(this GeneratorAttributeSyntaxContext source, out UsingDirectiveSyntax[] usings)
        //{
        //    var np = NamespaceDeclaration(IdentifierName(source.TargetSymbol.ContainingNamespace.ToDisplayString()))
        //        .WithLeadingTrivia(Comment("// <auto-generated/>"), Trivia(PragmaWarningDirectiveTrivia(Token(SyntaxKind.DisableKeyword), true)));
        //    //source.TargetSymbol.con


        //    return np;
        //}
    }



}
